"use strict";(self.webpackChunk_zendesk_laika_docs=self.webpackChunk_zendesk_laika_docs||[]).push([[634],{3905:function(e,t,a){a.d(t,{Zo:function(){return k},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},k=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,k=s(e,["components","mdxType","originalType","parentName"]),c=o(a),u=i,m=c["".concat(p,".").concat(u)]||c[u]||d[u]||r;return a?n.createElement(m,l(l({ref:t},k),{},{components:a})):n.createElement(m,l({ref:t},k))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4343:function(e,t,a){a.r(t),a.d(t,{assets:function(){return k},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return d}});var n=a(3117),i=a(102),r=(a(7294),a(3905)),l=["components"],s={id:"Laika.InterceptApi",title:"Class: InterceptApi",sidebar_label:"Laika.InterceptApi",custom_edit_url:null},p=void 0,o={unversionedId:"api/classes/Laika.InterceptApi",id:"api/classes/Laika.InterceptApi",title:"Class: InterceptApi",description:"Laika.InterceptApi",source:"@site/docs/api/classes/Laika.InterceptApi.md",sourceDirName:"api/classes",slug:"/api/classes/Laika.InterceptApi",permalink:"/laika/docs/api/classes/Laika.InterceptApi",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"Laika.InterceptApi",title:"Class: InterceptApi",sidebar_label:"Laika.InterceptApi",custom_edit_url:null},sidebar:"default",previous:{title:"Laika.Laika",permalink:"/laika/docs/api/classes/Laika.Laika-1"},next:{title:"Laika.LogApi",permalink:"/laika/docs/api/classes/Laika.LogApi"}},k={},d=[{value:"Properties",id:"properties",level:2},{value:"calls",id:"calls",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"allowNetworkFallback",id:"allownetworkfallback",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"disableNetworkFallback",id:"disablenetworkfallback",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"fireSubscriptionUpdate",id:"firesubscriptionupdate",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"mockReset",id:"mockreset",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"mockRestore",id:"mockrestore",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"mockResult",id:"mockresult",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"mockResultOnce",id:"mockresultonce",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"onSubscribe",id:"onsubscribe",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"waitForActiveSubscription",id:"waitforactivesubscription",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"waitForNextSubscription",id:"waitfornextsubscription",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-10",level:4}],c={toc:d};function u(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/modules/Laika"},"Laika"),".InterceptApi"),(0,r.kt)("p",null,"This is the mocking API that is returned after running ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.Laika-1#intercept"},(0,r.kt)("inlineCode",{parentName:"a"},"intercept()"))," on the ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.Laika-1"},"Laika"),"."),(0,r.kt)("p",null,"The API is chainable, with the exception of ",(0,r.kt)("inlineCode",{parentName:"p"},"mockRestore()"),"."),(0,r.kt)("p",null,"Inspired by ",(0,r.kt)("inlineCode",{parentName:"p"},"jest.fn()"),"."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"calls"},"calls"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"calls"),": readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">","[]"),(0,r.kt)("p",null,"An array containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"variables")," from subsequent operations that passed through this intercept."),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"jest.fn().mock.calls"),"."),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L816"},"src/laika.ts:816")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"allownetworkfallback"},"allowNetworkFallback"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"allowNetworkFallback"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"This restores the default behavior: both queries and mutations\nwill be passed to future links (e.g. your backend) and back to the components."),(0,r.kt)("p",null,"Does not affect ",(0,r.kt)("inlineCode",{parentName:"p"},"subscription")," operations which will not reach the backend regardless of this setting (unless the ",(0,r.kt)("inlineCode",{parentName:"p"},"connectFutureLinksOrMitmFn")," argument was set)."),(0,r.kt)("p",null,"Opposite of ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#disablenetworkfallback"},(0,r.kt)("inlineCode",{parentName:"a"},"disableNetworkFallback()")),"."),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L951"},"src/laika.ts:951")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"disablenetworkfallback"},"disableNetworkFallback"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"disableNetworkFallback"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,'If you invoke this and do not setup any mocked results, your intercepted queries will not respond,\ni.e. hang in a "loading" state, until you fire the data event manually\n(e.g. in a custom callback defined in ',(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#onsubscribe"},(0,r.kt)("inlineCode",{parentName:"a"},"onSubscribe(callback)")),"."),(0,r.kt)("p",null,"Does not affect ",(0,r.kt)("inlineCode",{parentName:"p"},"subscription")," operations which will not reach the backend regardless of this setting (unless the ",(0,r.kt)("inlineCode",{parentName:"p"},"connectFutureLinksOrMitmFn")," argument was set)."),(0,r.kt)("p",null,"Opposite of ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#allownetworkfallback"},(0,r.kt)("inlineCode",{parentName:"a"},"allowNetworkFallback()")),"."),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L942"},"src/laika.ts:942")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"firesubscriptionupdate"},"fireSubscriptionUpdate"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"fireSubscriptionUpdate"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fireMatcher?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("p",null,"Push data to an already active ",(0,r.kt)("inlineCode",{parentName:"p"},"subscription"),"-type operation.\nWill throw if there are no subscribers (e.g. active ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hooks)."),(0,r.kt)("p",null,"Works similarly to ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#mockresult"},(0,r.kt)("inlineCode",{parentName:"a"},"mockResult(...)")),", but the listener\nis being fed the new data upon execution."),(0,r.kt)("p",null,"Combine with ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#waitforactivesubscription"},(0,r.kt)("inlineCode",{parentName:"a"},"waitForActiveSubscription()")),"\nto ensure a subscription is active before calling."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"example")),"\nPush new information to a live feed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getActiveUsersCount'});\nawait intercept.waitForActiveSubscription();\nintercept.fireSubscriptionUpdate(\n  {result: {data: {count: 10}}},\n);\n// e.g. assert the count displayed on the page is in fact 10\nintercept.fireSubscriptionUpdate(\n  {result: {data: {count: 0}}},\n);\n// e.g. assert the page shows \"there are no active users currently on the page\"\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#resultorfn"},(0,r.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to be used as response in the shape of ",(0,r.kt)("inlineCode",{parentName:"td"},"{result: {}, error: {}}"),". Can be a function that takes operation as the first argument and returns the described object. This may be useful when you wish to customize the mocked response based on the variables from the query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fireMatcher?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#matcher"},(0,r.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Refine when this mock will fire with an additional {@link typedefs.matcher ","|"," matcher} (e.g. only when specific variables are matched)")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L924"},"src/laika.ts:924")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mockreset"},"mockReset"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"mockReset"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("p",null,"Resets the mock configuration to its initial state and reenables the intercept if disabled by ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#mockrestore"},(0,r.kt)("inlineCode",{parentName:"a"},"mockRestore()")),"."),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L955"},"src/laika.ts:955")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mockrestore"},"mockRestore"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"mockRestore"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Removes the intercept completely and re-establishes connectivity in current and ",(0,r.kt)("em",{parentName:"p"},"future")," intercepted operations.\nNote the word ",(0,r.kt)("em",{parentName:"p"},"future"),". Any connections that were established prior to running this command,\nwill not automatically switch over to other mocks. This will mostly affect subscriptions.\nIdeally, keep a reference to the original intercept throughout the duration of your session\nand simply ",(0,r.kt)("inlineCode",{parentName:"p"},"intercept.reset()")," if you need to restore connectivity or setup a different scenario."),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L963"},"src/laika.ts:963")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mockresult"},"mockResult"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"mockResult"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"matcher?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("p",null,"Sets the mock data that will be used as a default response to intercepted queries and mutations.\nIf used for subscriptions, will push data immediately."),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"jest.fn().mockReturnValue(...)"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"example")),"\nAlways respond with the mock to all queries/mutations intercepted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  {result: {data: {users: [{id: 1, name: 'Mouse'}, {id: 2, name: 'Bamboo'}]}}},\n);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with an error, but only when the operations's variables contain ",(0,r.kt)("inlineCode",{parentName:"p"},"{userGroup: 'elephants'}")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  {error: new Error(`oops, server blew up from all the elephants stomping!`)},\n  {variables: {userGroup: 'elephants'}}\n);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with a customized error based on the variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  ({variables}) => ({error: new Error(`oops, server blew up from all the ${variables.userGroup} stomping!`)})\n);\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#resultorfn"},(0,r.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to be used as response in the shape of ",(0,r.kt)("inlineCode",{parentName:"td"},"{result: {}, error: {}}"),". Can be a function that takes operation as the first argument and returns the described object. This may be useful when you wish to customize the mocked response based on the variables from the query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"matcher?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#matcher"},(0,r.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Refine when this mock will fire with an additional {@link typedefs.matcher ","|"," matcher} (e.g. only when specific variables are matched)")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L851"},"src/laika.ts:851")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mockresultonce"},"mockResultOnce"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"mockResultOnce"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"matcher?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("p",null,"Sets the mock data that will be used as the ",(0,r.kt)("em",{parentName:"p"},"next")," response to matching intercepted queries/mutations.\nIf used for subscription operations, will immediately push provided data to the next matching request.\nWorks the same as ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#mockresult"},(0,r.kt)("inlineCode",{parentName:"a"},"mockResult")),",\nexcept that as soon as a matching result is found in the queue of mocks, it will not be sent again."),(0,r.kt)("p",null,"Can be run multiple times and will send responses in order in which ",(0,r.kt)("inlineCode",{parentName:"p"},"mockResultOnce")," was called."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with the mock to the first intercepted operation with the name ",(0,r.kt)("inlineCode",{parentName:"p"},"getUsers"),",\nthen with a different mock the second time that operation is intercepted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept\n  .mockResultOnce(\n    {result: {data: {users: [{id: 1, name: 'Mouse'}, {id: 2, name: 'Bamboo'}]}}},\n  );\n  .mockResultOnce(\n    {result: {data: {users: [{id: 9, name: 'Ox'}, {id: 10, name: 'Fox'}]}}},\n  );\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#resultorfn"},(0,r.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to be used as response in the shape of ",(0,r.kt)("inlineCode",{parentName:"td"},"{result: {}, error: {}}"),". Can be a function that takes operation as the first argument and returns the described object. This may be useful when you wish to customize the mocked response based on the variables from the query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"matcher?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#matcher"},(0,r.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Refine when this mock will fire with an additional {@link typedefs.matcher ","|"," matcher} (e.g. only when specific variables are matched)")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi"},(0,r.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L879"},"src/laika.ts:879")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"onsubscribe"},"onSubscribe"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"onSubscribe"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"callback"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," ","|"," () => ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Add a callback that will fire every time a component connects to the query (i.e. mounts).\nYou may return a clean-up function which will be run when the query disconnects."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"callback")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/laika/docs/api/modules/typedefs#onsubscribecallback"},(0,r.kt)("inlineCode",{parentName:"a"},"OnSubscribeCallback")))))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")," ","|"," () => ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L932"},"src/laika.ts:932")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"waitforactivesubscription"},"waitForActiveSubscription"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"waitForActiveSubscription"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"In case of GraphQL subscriptions, will return synchronously if at least\none intercepted subscription is already active.\nIn other cases returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," and behaves the same way as ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/classes/Laika.InterceptApi#waitfornextsubscription"},(0,r.kt)("inlineCode",{parentName:"a"},"waitForNextSubscription()")),"."),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L888"},"src/laika.ts:888")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"waitfornextsubscription"},"waitForNextSubscription"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"waitForNextSubscription"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"observer"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Observer"),"<",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/interfaces/zendesk_laika.FetchResult"},(0,r.kt)("inlineCode",{parentName:"a"},"FetchResult")),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"[key: string]"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),";  }, ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">",", ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">",">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"operation"),": ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/interfaces/zendesk_laika.Operation"},(0,r.kt)("inlineCode",{parentName:"a"},"Operation")),"  }",">"),(0,r.kt)("p",null,"Returns a Promise that will resolve when the ",(0,r.kt)("em",{parentName:"p"},"next")," operation is run.\nThis translates to whenever a query/mutation is run, or whenever the ",(0,r.kt)("em",{parentName:"p"},"next")," subscription is made."),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"observer"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Observer"),"<",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/interfaces/zendesk_laika.FetchResult"},(0,r.kt)("inlineCode",{parentName:"a"},"FetchResult")),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"[key: string]"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),";  }, ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">",", ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">",">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"operation"),": ",(0,r.kt)("a",{parentName:"p",href:"/laika/docs/api/interfaces/zendesk_laika.Operation"},(0,r.kt)("inlineCode",{parentName:"a"},"Operation")),"  }",">"),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/f7a41bb/src/laika.ts#L893"},"src/laika.ts:893")))}u.isMDXComponent=!0}}]);