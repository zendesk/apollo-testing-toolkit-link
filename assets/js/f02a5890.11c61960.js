"use strict";(self.webpackChunk_zendesk_laika_docs=self.webpackChunk_zendesk_laika_docs||[]).push([[611],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),y=a,f=d["".concat(c,".").concat(y)]||d[y]||p[y]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1889:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return y},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={id:"usage-in-cypress",title:"Usage in Cypress",sidebar_label:"Usage in Cypress",custom_edit_url:null,hide_title:!0},c="Usage in Cypress",l={unversionedId:"usage-in-cypress",id:"usage-in-cypress",title:"Usage in Cypress",description:"Due to Cypress execution order, you need to wrap any calls to the interceptors with cy.then().",source:"@site/docs/usage-in-cypress.md",sourceDirName:".",slug:"/usage-in-cypress",permalink:"/laika/docs/usage-in-cypress",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"usage-in-cypress",title:"Usage in Cypress",sidebar_label:"Usage in Cypress",custom_edit_url:null,hide_title:!0},sidebar:"default",previous:{title:"Laika",permalink:"/laika/docs/api/modules/Laika"},next:{title:"Logging and recording",permalink:"/laika/docs/logging-and-recording"}},u={},p=[{value:"Pitfall: Data that comes outside of Apollo",id:"pitfall-data-that-comes-outside-of-apollo",level:2}],d={toc:p};function y(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usage-in-cypress"},"Usage in Cypress"),(0,i.kt)("p",null,"Due to Cypress execution order, you need to wrap any calls to the interceptors with ",(0,i.kt)("inlineCode",{parentName:"p"},"cy.then()"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"describe('My suite', () => {\n  /** @type {import('@zendesk/laika').Laika} */\n  let laika\n\n  before(() => {\n    cy.visit('/')\n    cy.window()\n      .its('laika')\n      .then((instance) => {\n        // this looks like a code smell, but it isn't\n        // instance will not change and we will only use it inside future `then`s\n        // by that time the variable will have been set!\n        laika = instance\n      })\n  })\n\n  it('waits for the subscription, pushes out data and asserts the element updated', () => {\n    /** @type {import('@zendesk/laika').InterceptApi} */\n    let getActiveUsersInterceptor\n\n    cy.then(() => {\n      getActiveUsersInterceptor = laika.intercept({\n        clientName: 'users',\n        operationName: 'getActiveUsers',\n      })\n    })\n\n    cy.then({ timeout: 5000 }, async () => {\n      await getActiveUsersInterceptor.waitForActiveSubscription()\n      getActiveUsersInterceptor.fireSubscriptionUpdate({\n        result: { data: { count: 10 } },\n      })\n    })\n\n    cy.get('activeUsers').contains(\n      'There are 10 users currently active on the website',\n    )\n  })\n})\n")),(0,i.kt)("h2",{id:"pitfall-data-that-comes-outside-of-apollo"},"Pitfall: Data that comes outside of Apollo"),(0,i.kt)("p",null,"With all the ease that ",(0,i.kt)("a",{parentName:"p",href:"/laika/docs/logging-and-recording"},"recording and code generation")," gives,\nit might be easy to forget that there might be other sources of data on the path to success."),(0,i.kt)("p",null,"If you've set-up all the mocks that were captured and your application\nstill doesn't behave as expected, check the network tab to see\nif there ain't any good 'ol REST call in the way of our success!"),(0,i.kt)("p",null,"If yes, and they look relevant to your action, you might need to make another mock for this purpose.\nFortunately, Cypress provides us with the necessary built-in tools to move forward."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// setup:\ncy.intercept(`**/api/v2/tickets/${issueId}?**`, myJsonFixtureResponse).as(\n  'issueFetch',\n)\n\n// wait for the call (if necessary):\ncy.wait('@issueFetch')\n")))}y.isMDXComponent=!0}}]);